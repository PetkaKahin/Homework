Mediator(посредник) - обеспечивает взаимодейсвтие между объектми, при этом объекты не знают друг о друге.

Примерчики:
- Есть несколько городов, у каждого города своя система репутации. Если игрок крадёт вещь, то в одном городе репутация растёт, а в другом - падает. Чтобы связать действия игрока и репутацию городов нужен медиатор.

- Связь разных слоёв архитектуры. Например UI и физики. Я хз) Примеры в голову вообще не лезут)




Фабрика - инкапсуляция создания объектов и изоляция этой инфы от основной чатси кода

Примерчики:
- Есть класс создания врагов с методом который принимает в себя тип врага(разбойник, орк, демон) и создаёт нужного врага в зависимости от переданного типа

- Есть класс который создаёт блоки, в метод создания блоков передаётся их размер 




Фабричный метод(Factory Method) - определяет интерфейс для создания объекта, но оставляет производным классам какой именно объект создать, т.е. мы совмещаем шаблонный метод и фабрику

Примерчики:
- Есть абстрактный класс создания фигур с методом CreateShape, и 2 наследника: CircleCreator и SquareCreator. Эти наследники будут переопределять CreateShape и создавать нужный объект

- Есть класс создания предметов которые можно подобрать, и у него есть наследники которые переопределяют метод создания объектов и их тип




Абстрактная фабрика(Abstract Factory) - представляет интерфейс для создания СЕМЕЙСТВ взаимозаменяемых объектов, но не описывает конкретных классов

Примерчики: 
- У нас есть абстрактный класс UnitFactory, у которого есть мотоды создания юнитов(рыцарь, маг, лучник, разбойник). 
И несколько наследников данного класса: IceUnitFactory, FireUintFactory, DarkUnitFactory. 
Получается работая через UnitFactory мы можем создавать любого юнита нужного нам типа

- У нас есть абстрактный класс кузнеца, у него есть методы по созданию меча, брони и стелкового оружия.
От этого класса наследуются японский, нордский и оркский кузнецы. Получается можно подойти к каждому кузнецу попросить создать меч и каждый кузнец сделает свой меч




Посетитель(Visitor) - позволяет добовлять новую операцию, выполняемую классом не внося изменения в этот класс

Примерчики:
- У нас есть оружие и классы, которые принимают урон от оружия(BodyHitBox, HeadHitBox, ItemHitBox). 
Эти хитбоксы реализуют интерфейс IWeaponVisitor, который имеет метод Visit с разнымы перегрузками в виде входящего типа оружия.
Оружие при попадании в эти классы вызывает у них метод Visit и передаёт себя в этот метод. 
У каждого класса хитбокса своя конкретная реализация попадания в зависимости от оружия




Декоратор - динамически добовляет объекту новые свойства

Примерчики:
- Оружие игрока, есть насколько классов реализующих интерфейс IWeapon
Каждый класс принимает в свой конструктор IWeapon и нужные ему данные
Класс ядовитого оружия принимаеит в себя класс колющего оружия, урон ядом и время отравления

- Можно сделать врагов через декоратор
Конструктор врага будет принимать в себя IEnemy и нужные данные
Фабрика будет выбирать как и кокого врага создовать
Например в класс стреляющего врага поместить класс быстрого врага